name: "Comprueba muchos milestones"
on:
  pull_request:
    paths:
      - 'proyectos/hito-[1234567].md'

jobs:
  extrae_usuario_repo:
    runs-on: ubuntu-latest
    steps:
      - name: Extrae URL del repositorio
        uses: JJ/github-pr-contains-action@releases/v2
        with:
          github-token: ${{github.token}}
          filesChanged: 1
      - name: Extrae usuario y nombre del repo
        uses: actions/github-script@v3
        env:
            ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const diff = process.env.diff;
            const ghRepoMatch = /github.com\/(\S+)\/(.+?)(:\s+|\))/.exec(diff)
            if  ( ghRepoMatch === null ) {
                core.setFailed("‚ùå There's no repo URL in this diff with required format")
            } else {
                const user = ghRepoMatch[1] // segundo resultado
                const repo = ghRepoMatch[2] // tercer resultado
                console.log( "¬ª Encontrado repo " + repo + " para usuario " + user )
                core.exportVariable('user',user)
                core.exportVariable('repo',repo)
            }
      - name: Exporta al fichero de entorno
        run: |
          echo IV_USER=${{env.user}} >> USER_REPO
          echo IV_REPO=${{env.repo}} >> USER_REPO
      - name: Sube resultados como artefactos
        uses: actions/upload-artifact@v2
        with:
          name: user-repo
          path: USER_REPO
      - name: Comprueba hitos
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const diff = process.env.diff;
            const ghRepoMatch = /github.com\/(\S+)\/(.+?)(:\s+|\))/.exec(diff)
            if  ( ghRepoMatch === null ) {
                core.setFailed("‚ùå There's no repo URL in this diff with required format")
            } else {
                const user = ghRepoMatch[1] // segundo resultado
                const repo = ghRepoMatch[2] // tercer resultado
                console.log( "¬ª Trabajando con el repo " + repo + " para el usuario " + user )
                const milestones = await github.issues.listMilestones( { owner: user, repo: repo } )
                if ( ! milestones.data.length ) {
                    core.setFailed("‚ùå Tiene que haber por lo menos un milestone")
                }
                const minMilestones = 3
                if ( minMilestones && milestones.data.length < minMilestones ) {
                    core.setFailed( "‚ùå Tendr√≠a que haber m√°s de " + minMilestones + " milestone(s)");
                }
                var totalIssues = 0
                var totalClosedIssues = 0
                milestones.data.forEach( async function( milestone ) {
                    totalIssues += milestone.open_issues + milestone.closed_issues
                    totalClosedIssues += milestone.closed_issues
                })
                console.log( "‚úÖ Hay " + totalIssues + " issues en tus milestones y " + totalClosedIssues + " cerrados ")
                if ( ! totalIssues ) {
                    core.setFailed( "‚ùå No hay ning√∫n issue en tus milestones")
                } else if ( ! totalClosedIssues ) {
                    core.setFailed( "‚ùå No hay ning√∫n issue cerrado milestones")
                }
            }

      - name: Busca historias de usuario
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const diff = process.env.diff;
            const ghRepoMatch = /github.com\/(\S+)\/(.+?)(:\s+|\))/.exec(diff)
            if  ( ghRepoMatch === null ) {
                core.setFailed("‚ùå No hay ning√∫n URL de un repositorio con el formato requerido en el diff")
            } else {
                const user = ghRepoMatch[1] // segundo resultado
                const repo = ghRepoMatch[2] // tercer resultado
                console.log( "¬ª Analizando repo " + repo + " del usuario üî•" + user )
                const non_paginated_issues = await github.issues.listForRepo.endpoint.merge( { owner: user, repo: repo })
                const issues = await github.paginate( non_paginated_issues )
                const user_stories = issues.filter(
                    issue =>
                        issue.labels.filter( label => label.name === "user-stories" ).length > 0
                        && issue.title.includes('HU')
                )
                if ( user_stories.length > 0 ) {
                    console.log( " ‚úÖ Hay al menos una historia de usuario " )
                } else {
                    core.setFailed( " ‚ùå No hay ninguna historia de usuario en el repo " )
                }
            }

